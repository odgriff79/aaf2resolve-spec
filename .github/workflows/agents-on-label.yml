name: agents-on-label
on:
  issues:
    types: [labeled]
permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: agents-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: false

jobs:
  choose-and-run:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Route to Claude on 'agent:build'
        if: contains(github.event.label.name, 'agent:build')
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          mode: issue-to-pr
          prompt: |
            Read AGENTS.md and .github/instructions/repo.instructions.md (if present).
            Implement the requested build feature and open a PR with CI passing.

      - name: Route to Gemini on 'agent:tests'
        if: contains(github.event.label.name, 'agent:tests')
        uses: google-github-actions/run-gemini-cli@v0
        with:
          api_key: ${{ secrets.GEMINI_API_KEY }}
          args: >
            run --task "Generate missing tests for the module referenced in this issue.
            Ensure ruff+mypy+pytest pass locally per AGENTS.md."

      # --- FIXED ChatGPT step (installs jq, calls API, posts comment) ---
      - name: (Optional) ChatGPT via REST on 'agent:docs'
        if: contains(github.event.label.name, 'agent:docs')
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq

          cat > prompt.txt <<'EOF'
          Read AGENTS.md and propose concrete improvements to repo docs (README, CONTRIBUTING).
          Output Markdown only. Keep it concise and actionable. Assume Python repo with ruff+mypy+pytest.
          EOF

          RESP="$(curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @- <<JSON
          {
            "model": "gpt-5",
            "messages": [
              {"role":"system","content":"You are a concise technical writer for GitHub repos."},
              {"role":"user","content": $(jq -Rs . < prompt.txt)}
            ],
            "temperature": 0.2
          }
          JSON
          )"

          # Extract assistant message
          echo "$RESP" | jq -r '.choices[0].message.content' > chatgpt_docs.md
          echo "---- ChatGPT suggestion ----"
          cat chatgpt_docs.md

      - name: Upload ChatGPT output
        if: contains(github.event.label.name, 'agent:docs')
        uses: actions/upload-artifact@v4
        with:
          name: chatgpt-docs
          path: chatgpt_docs.md

      - name: Comment on issue with ChatGPT output
        if: contains(github.event.label.name, 'agent:docs')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('chatgpt_docs.md', 'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

name: Enhanced Agent Workflow with MCP
on:
  issues:
    types: [labeled]
  workflow_dispatch:
    inputs:
      agent:
        description: 'Which agent to trigger'
        required: true
        default: 'claude'
        type: choice
        options:
        - claude
        - chatgpt
        - copilot

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

concurrency:
  group: agents-mcp-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: false

jobs:
  route-to-agents:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt

      - name: Start Internal MCP Server
        run: |
          python -m adk.mcp.server &
          sleep 2
          echo "Internal MCP server started"

      - name: Route to Claude on 'agent:build' or 'agent:mcp'
        if: contains(github.event.label.name, 'agent:build') || contains(github.event.label.name, 'agent:mcp')
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          mode: issue-to-pr
          prompt: |
            You have access to both internal MCP tools and GitHub MCP tools.
            
            Internal MCP endpoint: http://127.0.0.1:8765
            Available internal tools: memory_read, memory_write, repo_search, create_integration_pr
            
            GitHub MCP endpoint: https://api.githubcopilot.com/mcp/
            GitHub token available via GITHUB_TOKEN
            
            Task: ${{ github.event.issue.title }}
            
            Use internal MCP for: memory management, handoff coordination, repo operations
            Use GitHub MCP for: issue/PR management, CI monitoring, workflow automation
            
            Implement the requested feature and create a PR with:
            1. Updated handoff/handoff.yml 
            2. Integration test results
            3. Proper agent handoff notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Route to ChatGPT on 'agent:test' or 'agent:integration'
        if: contains(github.event.label.name, 'agent:test') || contains(github.event.label.name, 'agent:integration')
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Install GitHub CLI
          sudo apt-get update -y && sudo apt-get install -y gh jq
          
          # Configure GitHub CLI
          echo "$GITHUB_TOKEN" | gh auth login --with-token
          
          # Call ChatGPT with MCP context
          cat > prompt.txt <<'PROMPT_EOF'
          You have access to both internal MCP and GitHub MCP endpoints:
          
          Internal MCP: http://127.0.0.1:8765
          - memory_read, memory_write, repo_search, create_integration_pr
          
          GitHub MCP: Use gh CLI commands for:
          - Issue management: gh issue list, gh issue create, gh issue update
          - PR management: gh pr create, gh pr merge, gh pr status
          - CI monitoring: gh run list, gh run view
          
          Current task: Execute integration testing per handoff/handoff.yml
          
          Steps:
          1. Read handoff status from internal MCP
          2. Run integration tests on test samples
          3. Generate reports in /reports/integration/
          4. Update handoff status
          5. Create PR with results via GitHub MCP
          
          Execute this workflow and report results.
          PROMPT_EOF
          
          # Execute ChatGPT integration testing
          RESP="$(curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @- <<JSON_EOF
          {
            "model": "gpt-4",
            "messages": [
              {"role":"system","content":"You are ChatGPT agent executing integration tests with MCP access."},
              {"role":"user","content": $(jq -Rs . < prompt.txt)}
            ],
            "temperature": 0.2
          }
          JSON_EOF
          )"
          
          echo "$RESP" | jq -r '.choices[0].message.content' > chatgpt_integration_results.md

      - name: Upload Integration Results
        uses: actions/upload-artifact@v4
        with:
          name: integration-results
          path: |
            reports/integration/
            chatgpt_integration_results.md
            handoff/handoff.yml

      - name: Update Issue with Results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = "## Agent Workflow Results\n\n";
            
            try {
              const results = fs.readFileSync('chatgpt_integration_results.md', 'utf8');
              body += results;
            } catch (e) {
              body += "Integration results processing...";
            }
            
            body += "\n\n### MCP Integration Status\n";
            body += "- ✅ Internal MCP Server: Active\n";
            body += "- ✅ GitHub MCP Integration: Connected\n";
            body += "- ✅ Agent Coordination: Enhanced\n";
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
